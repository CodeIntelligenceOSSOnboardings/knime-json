<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="./service-in.png" type="Container"
	xmlns="http://knime.org/node/v4.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
	<name>Container Input (Row)</name>

	<shortDescription>
		Receives a row from an external caller (i.e. the Call Local/Remote Workflow (Row Based) nodes or via REST)	
    </shortDescription>
     
 	<fullDescription>
 		<intro>
	 		This node receives a row from an external caller 
			(i.e. the Call Workflow (Row Based) nodes or via an external REST client) and makes it available at the output 
	 		port. Rows are represented in the input as simple key/value maps where the keys are the column names and 
	 		the corresponding values are the row cells. 
	 		A configured parameter makes the Container Input (Row) visible to the external caller.
	 		<br/>
	 		<br/>
			If a data table is connected to the optional input port, the node will simply forward the first row of the 
			table to the output port unless a row is supplied via an external caller, in which case the supplied row 
			will be available at the output port.
			<br/>
			<br/>
			If no input is given, a configured template row is output.		
 		</intro>
 
         <option name="Parameter name">
             A name for the input parameter (preferably unique). This name is exposed in the REST interface.
         </option>
 
         <option name="Append unique ID to parameter name">
        	If checked, the name set above will be amended by the node's ID to guarantee unique parameter names. Usually
        	it's a good idea to have this box <i>not</i> checked and instead make sure to use meaningful and unique
        	names in all container nodes present in a workflow.
        </option>
 
         <option name="Description">
             A description for the input parameter. The description is shown in the API specification of the REST
             interface. 
         </option>
         
         <option name="Accept any input">
         	 Accepts any well formed input with an arbitrary number of columns. Each object (key/value pair) in 
         	 the input represents a column, where the key is the column name and the value is the cell. The columns will 
         	 only have primitive types (string, int, double, long and boolean).
         </option>
         
         <option name="Require input to match template row specification">
         	 Only accepts input that matches the template row specification. The input has to contain an object 
		     (key/value pair) for each of the columns in the template, where the key is identical to the column's name 
		     and the value can be parsed to the column's type. The input columns can be of any order, but will be output 
		     in the same order as in the template.
		     <br/>
		     <br/>
		     The input validation can be adjusted via a set of input validation options.
         </option>
         
         <option name="Template row">
		     The reference row which the external input is required to match. Defines the expected column names and 
		     types of the input and the order of the output.
		     <br/>
		     <br/>
		     The template row populates the "InputParameters" field of the generated API specification, which is 
		     presented to end users for documentation purposes.
         </option>

         <option name="Set first row of input as template">
			 Takes the first row from the table provided by the optional input port and sets it as the template.
         </option>
             
         <option name="Missing values">
             <i>Accept missing values - </i>
    	     the missing values in the input row will be filled with missing values.
           	 <br/>
			 <i>Fill with template values - </i>
			 the missing values in the input row will be filled with the corresponding values defined in the 
			 template row.
           	 <br/>
			 <i>Fail - </i>
			 missing values in the input row will cause the node to fail.
         </option>
         
         <option name="Missing columns">
             Defines how <i>missing columns</i>, i.e. columns that the template requires, but are not in the input, 
             are handled:
		     <br/>
		     <br/>
          	 <i>Fill with missing value</i> - the missing columns will be present in the output row with missing 
       		 values
		     <br/>
          	 <i>Fill with template value</i> - the missing columns will be present in the output row with the 
          	 corresponding template values defined in the template row
		     <br/>
             <i>Remove</i> - the missing columns are removed and not present in the output row 
		     <br/>
             <i>Fail</i> - the node fails on any missing columns
         </option>
         
         <option name="Unknown columns">
         	Defines how <i>unknown columns</i>, i.e. columns that are present in the input, but are not required by 
         	the template, are handled:
         	<br/>
         	<br/>
       		<i>Append at the end of the table</i> - appends all unknown columns at the end of the output row
         	<br/>
       		<i>Ignore</i> - ignores all unknown columns in the output row
         </option>
         
 	</fullDescription>

	<ports>
		<inPort index="0" name="Any input table">
			An optional input that can be used to configure a template row.
		</inPort>
	
		<outPort index="0" name="The container row">
			The row contained in this container. A configured template row is output if no row has been injected 
			from an external source.	
		</outPort>
	</ports>

</knimeNode>
