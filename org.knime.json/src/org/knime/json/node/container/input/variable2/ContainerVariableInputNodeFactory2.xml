<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="./service-in.png" type="Container" xmlns="http://knime.org/node/v4.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
    <name>Container Input (Variable)</name>

    <shortDescription>
        Injects flow variables optionally defined by a specification to the workflow.
    </shortDescription>

    <fullDescription>
        <intro>
            This node receives flow variables from an external caller (i.e. the Call Workflow (Table Based) node 
            or an external REST client) and makes them available to the workflow. A configured parameter makes the 
            <i>Container Input (Variable)</i> visible from the external caller and enables the external caller to 
            send the variables to the <i>Container Input (Variable)</i> node.<br/>
            <br/>
            If no variables are send to this node and template variables are defined, their value will be exposed to
            the workflow.
        </intro>

        <option name="Parameter name">
            A name for the variable input parameter (preferably unique). This name is exposed in the REST interface.
        </option>

        <option name="Append unique ID to parameter name">
            If checked, the name set above will be amended by the node's ID to guarantee unique parameter names. Usually
            it's a good idea to have this box <i>not</i> checked and instead make sure to use meaningful and unique
            names in all container nodes present in a workflow.
        </option>

        <option name="Description">
            A description for the variable input parameter. The description is shown in the API specification of the REST
            interface.
        </option>

        <option name="Accept any input">
            Accepts any well formed input with an arbitrary amount of variables.
            The input has to be an object.
            Each property (key/value) pair represents a variable. The property key defines
            the variable name (which has to be a valid name; see <i>Name</i>).
            The property value defines the variable value. The type of the variable
            will be determined using the JSON type of the property value. For a list
            of all supported types see <i>Type</i>.
        </option>
        <option name="Require input to match template variables specification">
            <p>
                Only accepts input with that matches the template variables specification.
                The input has to be an object or a value with a supported type (see <i>Use simplified JSON format</i>).
            </p>
            <p>
                If an object is required, each property (key/value) has to match exactly one of
                the variables in the specification.
                The property key has to match the variable name and the JSON type of the property has to
                match the variable type.
            </p>
            <p>
                If <i>Use simplified JSON format</i> is enabled, a value has to be used instead of an object.
                The type of the JSON value has to match the type defined by the only variable in the variable
                specification.
            </p>
        </option>
        <option name="Template Variables">
            <p>
                The template variables the external input is required to match. Defines the type, name and default
                value of the variables.
            </p>
            <p>
                The template variables populate the &#8220;InputParameters&#8221; field of the generated API
                specification, which is presented to end users for documentation purposes.
            </p>
        </option>
        <option name="Set input variables as template">
            Loads variables (that are not global constants) at the variable inports as the new template variables.
            Only supported types will be loaded. These are the same types as the ones listed in the <i>Type</i> section, i.e.
            <i>String,</i> <i>Integer,</i> <i>Double</i> and <i>Boolean</i>.
            There are two modes for loading the variables into the template:
            <ul>
                <li>
                    <i>replace:</i> Replaces all variables that are already defined by the variables from the
                        inports.
                </li>
                <li>
                    <i>merge:</i> Merges the variables from the inport and variables that are already defined
                    in the template. If a name is not already defined, the variable will be appended to the end.
                    Otherwise, the type and value of the matching variable will be updated to the ones
                    of the loaded variable.
                </li>
            </ul>
        </option>
        <option name="Use simplified JSON format">
            This option can only be used if exactly one variable is defined. As mentioned above this will allow
            the external input format to be simpler by using the value directly instead of an object that defines the
            variables as properties.
            E.g. if this option is enabled, the following format is expected in the &#8220;InputParameters&#8221;:
            <pre>
{
    ...
    "parameter-name": &lt;value&gt;,
    ...
}
</pre>
            instead of the object notation
            <pre>
{
    ...
    "parameter-name": {
        "variable-name": &lt;value&gt;
    },
    ...
}
</pre>
        <i>Note:</i>
            If this option is enabled, the variable will always have the same name as the parameter name without the
            unique ID appended (and thus the same naming restrictions).
        </option>
        <option name="Add">
            This button can be used to define a new template variable.
        </option>
        <option name="Type">
            This is the type of the template variable to create. Depending on the type the requirements for the variable value may
            change.
            <br />
                The following four basic data types are supported:
            <br />
            <ul>
                <li>
                    <i>String:</i>
                        A string of characters. This is the default if a new template variable is created.<br/>
                        The default value is an empty string.
                        <br/><br/>
                    To use this type in an external variable you have to use a JSON string.
                    <br/><br/>
                    <i>Note:</i>
                        The node will inform about a string that is empty or does only contain spaces because this
                        is probably unwanted.
                </li>
                <li>
                    <i>Integer:</i>
                        An integer number with possible values from 2&#179;&#185;-1 to -2&#179;&#185;.
                        The value must be a valid number (consisting only of an optional sign
                        (&#8220;+&#8221;/&#8220;-&#8221;) and &#8220;0&#8221;-&#8220;9&#8221;) and be in the range above.<br />
                        If the size of your value exceeds the limits above, you can try to use a <i>Double</i> value
                        instead.<br/>
                        The default value is &#8220;0&#8221;.
                        <br/><br/>
                    To use this type in an external variable you have to use a JSON number without a decimal point
                    (e.g. &#8220;123&#8221; instead of &#8220;123.0&#8221;).<br/>
                    <i>Note:</i>
                        Using too many digits in the JSON causes the number to be interpreted as a Long instead
                        which is not supported by this node.
                </li>
                <li>
                    <i>Double:</i>
                        A floating point decimal number with possible values from around 4.9&#183;10&#8315;&#179;&#178;&#8308; to 1.8&#183;10&#179;&#8304;&#8312;
                        in both the positive and negative range.<br />
                        The value must be a valid number (consisting only of an optional sign
                        (&#8220;+&#8221;/&#8220;-&#8221;) and &#8220;0&#8221;-&#8220;9&#8221;).
                        You can specify an exponent    by appending &#8220;e&#8221; followed by the exponent. Apart from a
                        numeric value you can also specify one of the following three (case-sensitive) special values:
                        <i>Infinity</i> for positive infinity,
                        <i>-Infinity</i> for negative infinity and
                        <i>NaN</i> for &#8220;Not a Number&#8221;.<br />
                        If the number is too big or too small, it may be converted into one of the these special values.
                        (You will be warned if this happens).<br />
                        You should keep in mind that you may loose some precision
                        for big values or values that are very close to zero.<br/>
                        The default value is &#8220;0.0&#8221;.
                        <br/><br/>
                    To use this type in an external variable you have to use a JSON number. Numbers with and without
                    a decimal point are supported.
                </li>
                <li>
                    <i>Boolean:</i>
                        A truth value that can be either &#8220;true&#8221; or &#8220;false&#8221;.<br/>
                        The default value is &#8220;false&#8221;.
                        <br/><br/>
                    To use this type in an external variable you have to use a JSON boolean.
                        <br/><br/>
                    <i>Note:</i>
                        Any other value will be interpreted as &#8220;false&#8221;.
                </li>
            </ul>
        </option>
        <option name="Variable Name">
            This is the name of the template variable. You can use any characters to define your name. However,
            a name must not be empty or be used by other template variables you have already defined in the node
            (regardless of the variable type).
        </option>
        <option name="Value">
            <p>
                The value of the template variable. It must comply with the type-requirements as described above.
            </p>
            <p>
                <i>Note:</i>
                    This value will be used as an output if no external value is present.
            </p>
        </option>
        <option name="Move/Remove variable">
            To improve readability of your template variables (e.g. grouping all values of a specific type) you can change their order by using the arrow buttons at the end of the row.
        <br />
            If you wish to delete a template variable definition, you can use the button with the bin icon next to
            the move buttons.
        </option>
        <link href="https://docs.knime.com/latest/analytics_platform_workflow_invocation_guide/index.html#workflow-invocation-nodes">
			KNIME Workflow Invocation (external clients)
        </link>
    </fullDescription>

    <ports>
        <inPort index="0" name="Any input variables">
            An optional input that is directly forwarded to the output of the node, unless overwritten by supplying variables via the REST API.
        </inPort>

        <outPort index="0" name="The injected variables">
            The injected variables, default values of the template variables if no variables have been injected.
        </outPort>
    </ports>
</knimeNode>
